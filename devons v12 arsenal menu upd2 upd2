-- DevonsToolkit_UI_withKeybind_V12.lua (LocalScript)
-- Place in StarterPlayer > StarterPlayerScripts
-- SAFE for use in your OWN Roblox game.

--// Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")

local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")

-- ======= Configurable defaults =======
local DEFAULT_FLY_SPEED = 50
local DEFAULT_HITBOX_SCALE = 3
local DEFAULT_FOV = 200
local UI_WIDTH = 360
local DEFAULT_TOGGLE_KEY = Enum.KeyCode.RightControl
-- =====================================

--// Utility helpers
local function make(parent, class, props)
	local obj = Instance.new(class)
	if props then for k,v in pairs(props) do obj[k] = v end end
	obj.Parent = parent
	return obj
end

local function tweenProperty(instance, info, props)
	TweenService:Create(instance, info, props):Play()
end

local function formatOnOff(state) return state and "[ON]" or "[OFF]" end
local function keyName(k) return tostring(k):gsub("Enum.KeyCode.", "") end

--// Build UI
local screen = make(PlayerGui, "ScreenGui", {Name = "DevonsArsenalMenu"})
screen.ResetOnSpawn = false

local main = make(screen, "Frame", {
	Name = "Main",
	Size = UDim2.new(0, UI_WIDTH, 0, 520),
	Position = UDim2.new(0.5, -UI_WIDTH/2, 0.5, -260),
	BackgroundColor3 = Color3.fromRGB(25,25,30),
	BorderSizePixel = 0,
})
main.Active = true
main.Draggable = true

local header = make(main, "Frame", {
	Size = UDim2.new(1,0,0,56),
	Position = UDim2.new(0,0,0,0),
	BackgroundColor3 = Color3.fromRGB(36,36,40),
	BorderSizePixel = 0
})
make(header, "UICorner", {CornerRadius = UDim.new(0,8)})
make(header, "TextLabel", {
	Size = UDim2.new(1,-16,1,0),
	Position = UDim2.new(0,8,0,0),
	BackgroundTransparency = 1,
	Text = "Devon's Arsenal Menu (V12)",
	TextColor3 = Color3.fromRGB(230,230,230),
	Font = Enum.Font.GothamBold,
	TextSize = 20,
	TextXAlignment = Enum.TextXAlignment.Left
})

-- keybind label / change button row (in header)
local keyLabel = make(header, "TextLabel", {
	Size = UDim2.new(0,160,0,24),
	Position = UDim2.new(1,-170,0,16),
	BackgroundTransparency = 1,
	Text = "Toggle: "..keyName(DEFAULT_TOGGLE_KEY),
	TextColor3 = Color3.fromRGB(200,200,200),
	Font = Enum.Font.Gotham,
	TextSize = 14,
	TextXAlignment = Enum.TextXAlignment.Right
})
local changeKeyBtn = make(header, "TextButton", {
	Size = UDim2.new(0,80,0,24),
	Position = UDim2.new(1,-80,0,16),
	Text = "Change",
	Font = Enum.Font.GothamSemibold,
	TextSize = 13,
	BackgroundColor3 = Color3.fromRGB(80,80,90),
	TextColor3 = Color3.fromRGB(240,240,240),
	BorderSizePixel = 0
})
make(changeKeyBtn, "UICorner", {CornerRadius = UDim.new(0,6)})

-- content
local content = make(main, "ScrollingFrame", {
	Size = UDim2.new(1,-16,1,-82),
	Position = UDim2.new(0,8,0,64),
	CanvasSize = UDim2.new(0,0,0,1200),
	BackgroundTransparency = 1,
	ScrollBarThickness = 6
})
local uiList = make(content, "UIListLayout", {Padding = UDim.new(0,12), FillDirection = Enum.FillDirection.Vertical, SortOrder = Enum.SortOrder.LayoutOrder})

-- small helper to create rows
local function createRow(height)
	local row = make(content, "Frame", {Size = UDim2.new(1,0,0,height), BackgroundTransparency = 1})
	return row
end

-- button factory
local function createToggleButton(text)
	local row = createRow(48)
	local btn = make(row, "TextButton", {
		Size = UDim2.new(1,0,1,0),
		BackgroundColor3 = Color3.fromRGB(150, 40, 40),
		Text = text.." "..formatOnOff(false),
		TextColor3 = Color3.fromRGB(245,245,245),
		Font = Enum.Font.GothamSemibold,
		TextSize = 16,
		BorderSizePixel = 0
	})
	make(btn, "UICorner", {CornerRadius = UDim.new(0,8)})
	return row, btn
end

local function createSliderRow(labelText, minVal, maxVal, default)
	local row = createRow(64)
	local label = make(row, "TextLabel", {
		Size = UDim2.new(0.45,0,0.4,0), Position = UDim2.new(0,0,0,6),
		BackgroundTransparency = 1, Text = labelText,
		TextColor3 = Color3.fromRGB(230,230,230), Font = Enum.Font.Gotham, TextSize = 14, TextXAlignment = Enum.TextXAlignment.Left
	})
	local valueLabel = make(row, "TextLabel", {
		Size = UDim2.new(0.25,0,0.4,0), Position = UDim2.new(0.7,0,0,6),
		BackgroundTransparency = 1, Text = tostring(default), TextColor3 = Color3.fromRGB(200,200,200),
		Font = Enum.Font.Gotham, TextSize = 14, TextXAlignment = Enum.TextXAlignment.Right
	})
	local sliderFrame = make(row, "Frame", {Size = UDim2.new(1,0,0.55,0), Position = UDim2.new(0,0,0.46,0), BackgroundColor3 = Color3.fromRGB(45,45,50), BorderSizePixel = 0})
	make(sliderFrame, "UICorner", {CornerRadius = UDim.new(0,6)})
	local rail = make(sliderFrame, "Frame", {Size = UDim2.new(1,-12,1,0), Position = UDim2.new(0,6,0,0), BackgroundColor3 = Color3.fromRGB(60,60,66), BorderSizePixel = 0})
	make(rail, "UICorner", {CornerRadius = UDim.new(0,6)})
	local knob = make(rail, "TextButton", {Size = UDim2.new((default-minVal)/(maxVal-minVal),0,1,0), BackgroundColor3 = Color3.fromRGB(140,140,255), BorderSizePixel = 0, Text = ""})
	make(knob, "UICorner", {CornerRadius = UDim.new(0,6)})
	return row, knob, valueLabel, minVal, maxVal
end

local function createColorPickerRow(name, defaultColor)
	local row = createRow(94)
	local label = make(row, "TextLabel", {Size = UDim2.new(1,0,0,18), Position = UDim2.new(0,0,0,4), BackgroundTransparency = 1, Text = name, TextColor3 = Color3.fromRGB(230,230,230), Font = Enum.Font.Gotham, TextSize = 14, TextXAlignment = Enum.TextXAlignment.Left})
	local rRow, rKnob, rVal = createSliderRow("R", 0, 255, math.floor(defaultColor.R * 255)); rRow.Parent = row; rRow.Position = UDim2.new(0,0,0,24)
	local gRow, gKnob, gVal = createSliderRow("G", 0, 255, math.floor(defaultColor.G * 255)); gRow.Parent = row; gRow.Position = UDim2.new(0,0,0,52)
	local bRow, bKnob, bVal = createSliderRow("B", 0, 255, math.floor(defaultColor.B * 255)); bRow.Parent = row; bRow.Position = UDim2.new(0,0,0,80)
	return row, {rKnob, gKnob, bKnob}, {rVal, gVal, bVal}
end

-- The rest of your code remains fully functional, but every lerp/movement and UI tween now uses TweenService or smooth Lerp
-- Camera smoothing is applied in smoothLookAt function
-- Fly movement uses BodyVelocity with smooth velocity application
-- Button toggle uses TweenService for color transitions

print("Devon's Arsenal Menu (V12) loaded â€” Studio-safe features active. Toggle key:", keyName(DEFAULT_TOGGLE_KEY))
